{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#libraries \n",
    "import numpy as np\n",
    "import pandas as pd \n",
    "import pickle \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.base import BaseEstimator, TransformerMixin \n",
    "\n",
    "#custom scaler\n",
    "class CustomScaler(BaseEstimator, TransformerMixin):\n",
    "\n",
    "    def __init__(self,columns,copy=True,with_mean=True,with_std=True):\n",
    "        self.scaler = StandardScaler(copy,with_mean,with_std)\n",
    "        self.columns = columns\n",
    "        self.mean_ = None\n",
    "        self.var_ = None\n",
    "        \n",
    "    def fit(self, X, y=None):\n",
    "        self.scaler.fit(X[self.columns], y)\n",
    "        self.mean_ = np.mean(X[self.columns])\n",
    "        self.var_ = np.var(X[self.columns])\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X, y=None, copy=None):\n",
    "    \n",
    "        init_col_order = X.columns\n",
    "        X_scaled = pd.DataFrame(self.scaler.transform(X[self.columns]), columns=self.columns)\n",
    "        X_not_scaled = X.loc[:,~X.columns.isin(self.columns)]\n",
    "        return pd.concat([X_not_scaled, X_scaled], axis=1)[init_col_order]\n",
    "\n",
    "#class for new data\n",
    "\n",
    "class model():\n",
    "    \n",
    "    def __init__ (self, model_file, scaler_file:\n",
    "        with open ('ABSENT_model', 'wb') as model_file, open ('Scaler', 'wb') as scaler_file:\n",
    "                  self.reg = pickle.load(model_file)\n",
    "                  self.scaler = pickle.load(scalar_file)\n",
    "                  self.data = None \n",
    "                  \n",
    "    def load_and_clean(self, data_file):\n",
    "                  \n",
    "                  dataset = pd.read_csv(data_file, delimeter=';')\n",
    "                  self.df_with_predictions = dataset.copy() \n",
    "                  dataset = dataset.drop(['ID'], axis = 1) \n",
    "                  dataset['Absenteeism time in hours'] = 'NaN'\n",
    "                  \n",
    "                  rcolumn = pd.get_dummies(dataset['Reason for absence'], drop_first = True)\n",
    "                  \n",
    "                  reasontype1 = rcolumn.loc[:, 1:14].max(axis=1)\n",
    "                  reasontype2 = rcolumn.loc[:, 15:17].max(axis=1)\n",
    "                  reasontype3 = rcolumn.loc[:, 18:21].max(axis=1)\n",
    "                  reasontype4 = rcolumn.loc[:, 22:28].max(axis=1)\n",
    "                  \n",
    "                  dataset = dataset.drop(['Reason for absence'], axis=1)\n",
    "                  \n",
    "                  dataset = pd.concat([dataset, reasontype1, reasontype2, reasontype3, reasontype4], axis = 1)\n",
    "                  \n",
    "                  \n",
    "                  column_names = ['Date', 'Transportation Expense', 'Distance to Work', 'Age',\n",
    "                           'Daily Work Load Average', 'Body Mass Index', 'Education', 'Children',\n",
    "                           'Pet', 'Absenteeism Time in Hours', 'Reason_1', 'Reason_2', 'Reason_3', 'Reason_4']\n",
    "                  dataset.columns = column_names\n",
    "                  \n",
    "                  \n",
    "                  reordered = ['Reason_1', 'Reason_2', 'Reason_3', 'Reason_4', 'Date', 'Transportation Expense', \n",
    "                                      'Distance to Work', 'Age', 'Daily Work Load Average', 'Body Mass Index', 'Education', \n",
    "                                      'Children', 'Pet', 'Absenteeism Time in Hours']\n",
    "                  \n",
    "                  dataset = dataset[reordered]\n",
    "                  \n",
    "                  \n",
    "                  dataset['Date'] = pd.to_datetime(dataset['Date'], format='%d/%m/%Y')\n",
    "                  \n",
    "                  \n",
    "                  list_months = []\n",
    "                  \n",
    "                  for i in range(dataset.shape[0]):\n",
    "                  list_months.append(dataset['Date'][i].month)\n",
    "\n",
    "            \n",
    "            dataset['Month Value'] = list_months\n",
    "\n",
    "          \n",
    "            dataset['Day of the Week'] = dataset['Date'].apply(lambda x: x.weekday())\n",
    "\n",
    "\n",
    "            #\n",
    "            dataset = dataset.drop(['Date'], axis = 1)\n",
    "\n",
    "            \n",
    "            column_names_upd = ['Reason_1', 'Reason_2', 'Reason_3', 'Reason_4', 'Month Value', 'Day of the Week',\n",
    "                                'Transportation Expense', 'Distance to Work', 'Age',\n",
    "                                'Daily Work Load Average', 'Body Mass Index', 'Education', 'Children',\n",
    "                                'Pet', 'Absenteeism Time in Hours']\n",
    "            dataset = dataset[column_names_upd]\n",
    "            dataset['Education'] = dataset['Education'].map({1:0, 2:1, 3:1, 4:1})\n",
    "            dataset = dataset.fillna(value=0)\n",
    "            dataset = dataset.drop(['Absenteeism Time in Hours'],axis=1)\n",
    "            dataset = dataset.drop(['Day of the Week','Daily Work Load Average','Distance to Work'],axis=1)\n",
    "            \n",
    "            \n",
    "            self.preprocessed_data = dataset.copy()\n",
    "            self.data = self.scaler.transform(dataset)\n",
    "    \n",
    "\n",
    "        def predicted_probability(self):\n",
    "            if (self.data is not None):  \n",
    "                pred = self.reg.predict_proba(self.data)[:,1]\n",
    "                return pred\n",
    "        \n",
    "        def predicted_output_category(self):\n",
    "            if (self.data is not None):\n",
    "                pred_outputs = self.reg.predict(self.data)\n",
    "                return pred_outputs\n",
    "        \n",
    "        def predicted_outputs(self):\n",
    "            if (self.data is not None):\n",
    "                self.preprocessed_data['Probability'] = self.reg.predict_proba(self.data)[:,1]\n",
    "                self.preprocessed_data ['Prediction'] = self.reg.predict(self.data)\n",
    "                return self.preprocessed_data\n",
    "                  \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
